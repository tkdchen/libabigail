#!/usr/bin/python
# -*- coding: utf-8 -*-
# -*- Mode: Python
#
# This file is part of the GNU Application Binary Interface Generic
# Analysis and Instrumentation Library (libabigail).  This library is
# free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3, or (at your option) any
# later version.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; see the file COPYING-GPLV3.  If
# not, see <http:#www.gnu.org/licenses/>.
#
# Author: Chenxiong Qi

import os
import re
import tempfile

from collections import namedtuple
from StringIO import StringIO

"""
This test harness tests various global methods and classes within
tools/fedabipkgdiff.
"""

try:
    from mock import patch
except ImportError:
    import sys
    print >>sys.stderr, \
        'mock is required to run tests. Please install before running tests.'
    sys.exit(1)

import imp
# Import the fedabipkgdiff program file from the source directory.
fedabipkgdiff_mod = imp.load_source('fedabipkgdiff',
                                    '@top_srcdir@/tools/fedabipkgdiff')

# Directory holding data used by following tests
TEST_DATA_DIR = os.path.abspath(
    os.path.join('@top_srcdir@', 'tests', 'data', 'test-fedabipkgdiff'))

# topdir for tests from where to find and be treated as remote rpms to
# download.
TEST_TOPDIR = 'file://{0}'.format(TEST_DATA_DIR)

# download cache directory for tests to avoid touch the real xdg_cache_home and
# break any normal usage with fedabipkgdiff.
# Note, as `tempfile.mkdtemp` is called, each time to run tests from this
# module, this cache directory will be created at once.
TEST_DOWNLOAD_CACHE_DIR = tempfile.mkdtemp(
    prefix='libabigail-test-fedabipkgdiff-download-cache-')

# Reference to built abipkgdiff command
ABIPKGDIFF = '@top_builddir@/tools/abipkgdiff'


# -----------------  Koji resource storage begins ------------------
#
# List all necessary Koji resources for running tests within this test
# module. Currently, packages, builds, and rpms are listed here, and their
# relationship is maintained well. At the same time, all information including
# the ID for each package, build and rpm is real and can be queried from Koji,
# that is for convenience once developers need this.
#
# When additional packages, builds and rpms are required for test cases, here
# is the right place to add them. Just think them as a super simple in-memory
# database, and methods of MockClientSession knows well how to read them.

packages = [
    {'id': 286, 'name': 'gnutls'},
    {'id': 612, 'name': 'dbus-glib'},
    {'id': 9041, 'name': 'nss-util'},
    ]

builds = [
    {'build_id': 428835, 'nvr': 'dbus-glib-0.100-4.fc20',
     'name': 'dbus-glib', 'release': '4.fc20', 'version': '0.100',
     'package_id': 612, 'package_name': 'dbus-glib', 'state': 1,
     },
    {'build_id': 430720, 'nvr': 'dbus-glib-0.100.2-1.fc20',
     'name': 'dbus-glib', 'release': '1.fc20', 'version': '0.100.2',
     'package_id': 612, 'package_name': 'dbus-glib', 'state': 1,
     },
    {'build_id': 442366, 'nvr': 'dbus-glib-0.100.2-2.fc20',
     'name': 'dbus-glib', 'release': '2.fc20', 'version': '0.100.2',
     'package_id': 612, 'package_name': 'dbus-glib', 'state': 1,
     },
    {'build_id': 715478, 'nvr': 'dbus-glib-0.106-1.fc23',
     'name': 'dbus-glib', 'release': '1.fc23', 'version': '0.106',
     'package_id': 612, 'package_name': 'dbus-glib', 'state': 1,
     },
    {'build_id': 648058, 'nvr': 'dbus-glib-0.104-3.fc23',
     'name': 'dbus-glib', 'release': '3.fc23', 'version': '0.104',
     'package_id': 612, 'package_name': 'dbus-glib', 'state': 1,
     },
    {'build_id': 613769, 'nvr': 'dbus-glib-0.104-2.fc23',
     'name': 'dbus-glib', 'release': '2.fc23', 'version': '0.104',
     'package_id': 612, 'package_name': 'dbus-glib', 'state': 1,
     },

    {'build_id': 160295, 'nvr': 'nss-util-3.12.6-1.fc14',
     'name': 'nss-util', 'version': '3.12.6', 'release': '1.fc14',
     'package_id': 9041, 'package_name': 'nss-util', 'state': 1,
     },
    {'build_id': 767978, 'nvr': 'nss-util-3.24.0-2.0.fc25',
     'name': 'nss-util', 'version': '3.24.0', 'release': '2.0.fc25',
     'package_id': 9041, 'package_name': 'nss-util', 'state': 1,
     },

    # builds of package gnutls
    {'build_id': 767306, 'nvr': 'gnutls-3.4.12-1.fc23',
     'name': 'gnutls', 'release': '1.fc23', 'version': '3.4.12',
     'package_id': 286, 'package_name': 'gnutls', 'state': 1,
     },
    {'build_id': 770965, 'nvr': 'gnutls-3.4.13-1.fc23',
     'name': 'gnutls', 'release': '1.fc23', 'version': '3.4.13',
     'package_id': 286, 'package_name': 'gnutls', 'state': 1,
     },
    {'build_id': 649701, 'nvr': 'gnutls-3.4.2-1.fc23',
     'name': 'gnutls', 'release': '1.fc23', 'version': '3.4.2',
     'package_id': 286, 'package_name': 'gnutls', 'state': 1,
     },
    ]

rpms = [
    {'build_id': 442366,
     'name': 'dbus-glib', 'release': '2.fc20', 'version': '0.100.2',
     'arch': 'x86_64', 'nvr': 'dbus-glib-0.100.2-2.fc20',
     },
    {'build_id': 442366,
     'name': 'dbus-glib-devel', 'release': '2.fc20', 'version': '0.100.2',
     'arch': 'x86_64', 'nvr': 'dbus-glib-devel-0.100.2-2.fc20',
     },
    {'build_id': 442366,
     'name': 'dbus-glib-debuginfo', 'release': '2.fc20', 'version': '0.100.2',
     'arch': 'x86_64', 'nvr': 'dbus-glib-debuginfo-0.100.2-2.fc20',
     },
    {'build_id': 442366,
     'name': 'dbus-glib-devel', 'release': '2.fc20', 'version': '0.100.2',
     'arch': 'i686', 'nvr': 'dbus-glib-devel-0.100.2-2.fc20',
     },
    {'build_id': 442366,
     'name': 'dbus-glib-debuginfo', 'release': '2.fc20', 'version': '0.100.2',
     'arch': 'i686', 'nvr': 'dbus-glib-debuginfo-0.100.2-2.fc20',
     },
    {'build_id': 442366,
     'name': 'dbus-glib', 'version': '0.100.2', 'release': '2.fc20',
     'arch': 'i686', 'nvr': 'dbus-glib-0.100.2-2.fc20',
     },

    {'build_id': 715478,
     'name': 'dbus-glib-debuginfo', 'version': '0.106', 'release': '1.fc23',
     'arch': 'i686', 'nvr': 'dbus-glib-debuginfo-0.106-1.fc23',
     },
    {'build_id': 715478,
     'name': 'dbus-glib', 'version': '0.106', 'release': '1.fc23',
     'arch': 'i686', 'nvr': 'dbus-glib-0.106-1.fc23',
     },
    {'build_id': 715478,
     'name': 'dbus-glib-devel', 'version': '0.106', 'release': '1.fc23',
     'arch': 'i686', 'nvr': 'dbus-glib-devel-0.106-1.fc23',
     },
    {'build_id': 715478,
     'name': 'dbus-glib', 'version': '0.106', 'release': '1.fc23',
     'arch': 'x86_64', 'nvr': 'dbus-glib-0.106-1.fc23',
     },
    {'build_id': 715478,
     'name': 'dbus-glib-debuginfo', 'version': '0.106', 'release': '1.fc23',
     'arch': 'x86_64', 'nvr': 'dbus-glib-debuginfo-0.106-1.fc23',
     },
    {'build_id': 715478,
     'name': 'dbus-glib-devel', 'release': '1.fc23', 'version': '0.106',
     'arch': 'x86_64', 'nvr': 'dbus-glib-devel-0.106-1.fc23',
     },

    # RPMs of build nss-util-3.12.6-1.fc14
    {'build_id': 160295,
     'name': 'nss-util', 'release': '1.fc14', 'version': '3.12.6',
     'arch': 'x86_64', 'nvr': 'nss-util-3.12.6-1.fc14',
     },
    {'build_id': 160295,
     'name': 'nss-util-devel', 'release': '1.fc14', 'version': '3.12.6',
     'arch': 'x86_64', 'nvr': 'nss-util-devel-3.12.6-1.fc14',
     },
    {'build_id': 160295,
     'name': 'nss-util-debuginfo', 'release': '1.fc14', 'version': '3.12.6',
     'arch': 'x86_64', 'nvr': 'nss-util-debuginfo-3.12.6-1.fc14',
     },

    # RPMs of build nss-util-3.24.0-2.0.fc25
    {'build_id': 767978,
     'name': 'nss-util-debuginfo', 'release': '2.0.fc25', 'version': '3.24.0',
     'arch': 'x86_64', 'nvr': 'nss-util-debuginfo-3.24.0-2.0.fc25',
     },
    {'build_id': 767978,
     'name': 'nss-util', 'release': '2.0.fc25', 'version': '3.24.0',
     'arch': 'x86_64', 'nvr': 'nss-util-3.24.0-2.0.fc25',
     },
    {'build_id': 767978,
     'name': 'nss-util-devel', 'release': '2.0.fc25', 'version': '3.24.0',
     'arch': 'x86_64', 'nvr': 'nss-util-devel-3.24.0-2.0.fc25',
     },
    ]

# -----------------  End of Koji resource storage ------------------


class MockClientSession(object):
    """Mock koji.ClientSession

    This mock ClientSession aims to avoid touching a real Koji instance to
    interact with XMLRPC APIs required by fedabipkgdiff.

    For the tests within this module, methods do not necessarily to return
    complete RPM and build information. So, if you need more additional
    information, here is the right place to add them.
    """

    def __init__(self, baseurl):
        """Initialize a mock ClientSession

        :param str baseurl: the URL to remote kojihub service. As of writing
        this mock class, `baseurl` is not used at all, just keep it here if
        it's useful in the future.

        All mock methods have same signature as corresponding kojihub.*
        methods, and type of parameters may be different and only satify
        fedabipkgdiff requirement.
        """
        self.baseurl = baseurl

    def getPackage(self, name):
        """Mock kojihub.getPackage

        :param str name: name of package to find and return
        :return: the found package
        :rtype: dict
        """
        assert isinstance(name, basestring)

        def selector(package):
            return package['name'] == name

        return filter(selector, packages)[0]

    def getBuild(self, build_id):
        """Mock kojihub.getBuild

        :param int build_id: ID of build to find and return
        :return: the found build
        :rtype: dict
        """
        assert isinstance(build_id, int)

        def selector(build):
            return build['build_id'] == build_id

        return filter(selector, builds)[0]

    def listBuilds(self, packageID, state=None):
        """Mock kojihub.listBuilds

        :param int packageID: ID of package whose builds is found and returned
        :param state: build state. If state is omitted, all builds of a package
        are returned
        :type state: int or None
        """
        assert isinstance(packageID, int)
        if state is not None:
            assert isinstance(state, int)

        def selector(build):
            selected = build['package_id'] == packageID
            if state is not None:
                selected = selected and build['state'] == state
            return selected

        return filter(selector, builds)

    def getRPM(self, rpminfo):
        """Mock kojihub.getRPM

        :param dict rpminfo: a mapping containing rpm information, at least,
        it contains name, version, release, and arch.
        """
        assert isinstance(rpminfo, dict)

        def selector(rpm):
            return rpm['name'] == rpminfo['name'] and \
                rpm['version'] == rpminfo['version'] and \
                rpm['release'] == rpminfo['release'] and \
                rpm['arch'] == rpminfo['arch']

        return filter(selector, rpms)[0]

    def listRPMs(self, buildID, arches=None):
        """Mock kojihub.listRPMs

        :param int buildID: ID of build from which to list rpms
        :param arches: to list rpms built for specific arches. If arches is
        omitted, rpms of all arches will be listed.
        :type arches: list, tuple, str, or None
        :return: list of rpms
        :rtype: list
        """
        assert isinstance(buildID, int)
        if arches is not None:
            assert isinstance(arches, (tuple, list, basestring))

        if arches is not None and isinstance(arches, basestring):
            arches = [arches]

        def selector(rpm):
            selected = rpm['build_id'] == buildID
            if arches is not None:
                selected = selected and rpm['arch'] in arches
            return selected

        return filter(selector, rpms)


class MockGlobalConfig(object):
    """Used to mock global_config

    Since tests do not parse options from command line, so this class is
    helpful for tests to contain all potential parsed (simulated)
    options.

    Currently, only koji_server and dry_run are required for running
    tests. If any new test cases need others, please add them add as
    class attribute directly.
    """
    koji_server = fedabipkgdiff_mod.DEFAULT_KOJI_SERVER
    koji_topdir = fedabipkgdiff_mod.DEFAULT_KOJI_TOPDIR
    dry_run = False
    dso_only = True
    abipkgdiff = ABIPKGDIFF
    no_default_suppr = True
    no_devel_pkg = None
    check_all_subpackages = None


# ################ Integration tests start from here ###################
#
# Following integration tests aim to test execution of fedabipkgdiff from
# command line options to the expected ABI comparison result.

# Two-elements tuple contains pair of command line and the expected results
# from the execution of that command.
# The first element cli is a list of strings that are combined to generate the
# command line.
# The second one expected_results is a mapping from the name to concrete
# expected values. Currently, compared_rpms, compared_binaries, and
# func_change_summary are supported.
#
# If you are adding new test case, you need to append a new CliTestResult to
# tuple cli_results with well-constructed command line and expected values for
# assertion.
CliTestResult = namedtuple('CliTestResult', 'cli expected_results')

cli_results = (
    # Test compare all arches of a package's latest build
    # e.g. fedabipkgdiff --from fc20 --to fc23 dbus-glib
    CliTestResult(
        ['fedabipkgdiff', '--topdir', TEST_TOPDIR,
         '--abipkgdiff', ABIPKGDIFF, '--from', 'fc20', '--to', 'fc23',
         'dbus-glib'],
        {
            'compared_rpms': [('dbus-glib-0.100.2-2.fc20.i686.rpm',
                               'dbus-glib-0.106-1.fc23.i686.rpm'),
                              ('dbus-glib-0.100.2-2.fc20.x86_64.rpm',
                               'dbus-glib-0.106-1.fc23.x86_64.rpm')],
            'compared_binaries': ['dbus-binding-tool',
                                  'libdbus-glib-1.so.2.2.2']
        }),

    # Test compare local rpm with remote associated one from Koji
    # e.g. fedabipkgdiff --from fc20 path/to/local/rpm
    CliTestResult(
        ['fedabipkgdiff', '--topdir', TEST_TOPDIR,
         '--abipkgdiff', ABIPKGDIFF, '--from', 'fc20',
         os.path.join(TEST_DATA_DIR,
                      'packages/dbus-glib/0.106/1.fc23/x86_64/'
                      'dbus-glib-0.106-1.fc23.x86_64.rpm')],
        {
            'compared_rpms': [('dbus-glib-0.100.2-2.fc20.x86_64.rpm',
                               'dbus-glib-0.106-1.fc23.x86_64.rpm')],
            'compared_binaries': ['dbus-binding-tool',
                                  'libdbus-glib-1.so.2.2.2']
        }),

    # Test compare rpms of packages specified by N-V-R
    # e.g. fedabipkgdiff N-V-R N-V-R
    CliTestResult(
        ['fedabipkgdiff', '--topdir', TEST_TOPDIR,
         '--abipkgdiff', ABIPKGDIFF,
         'dbus-glib-0.100.2-2.fc20', 'dbus-glib-0.106-1.fc23'],
        {
            'compared_rpms': [('dbus-glib-0.100.2-2.fc20.i686.rpm',
                               'dbus-glib-0.106-1.fc23.i686.rpm'),
                              ('dbus-glib-0.100.2-2.fc20.x86_64.rpm',
                               'dbus-glib-0.106-1.fc23.x86_64.rpm')],
            'compared_binaries': ['dbus-binding-tool',
                                  'libdbus-glib-1.so.2.2.2']
        }),

    # Test compare rpms of packages specified by N-V-R-A
    # e.g. fedabipkgdiff N-V-R-A N-V-R-A
    CliTestResult(
        ['fedabipkgdiff', '--topdir', TEST_TOPDIR,
         '--abipkgdiff', ABIPKGDIFF,
         'dbus-glib-0.100.2-2.fc20.i686', 'dbus-glib-0.106-1.fc23.i686'],
        {
            'compared_rpms': [('dbus-glib-0.100.2-2.fc20.i686.rpm',
                               'dbus-glib-0.106-1.fc23.i686.rpm')],
            'compared_binaries': ['dbus-binding-tool',
                                  'libdbus-glib-1.so.2.2.2']
        }),

    # Test --all-subpackages, compare all rpms instead of the main rpm only
    # e.g. fedabipkgdiff --all-subpackages N-V-R N-V-R
    CliTestResult(
        ['fedabipkgdiff', '--topdir', TEST_TOPDIR,
         '--abipkgdiff', ABIPKGDIFF, '--all-subpackages',
         'dbus-glib-0.100.2-2.fc20', 'dbus-glib-0.106-1.fc23'],
        {
            'compared_rpms': [('dbus-glib-devel-0.100.2-2.fc20.i686.rpm',
                               'dbus-glib-devel-0.106-1.fc23.i686.rpm'),
                              ('dbus-glib-0.100.2-2.fc20.i686.rpm',
                               'dbus-glib-0.106-1.fc23.i686.rpm'),
                              ('dbus-glib-0.100.2-2.fc20.x86_64.rpm',
                               'dbus-glib-0.106-1.fc23.x86_64.rpm'),
                              ('dbus-glib-devel-0.100.2-2.fc20.x86_64.rpm',
                               'dbus-glib-devel-0.106-1.fc23.x86_64.rpm')],
            'compared_binaries': ['dbus-bash-completion-helper',
                                  'dbus-binding-tool',
                                  'libdbus-glib-1.so.2.2.2']
        }),


    # Test --dso-only, only compare shared libraries
    CliTestResult(
        ['fedabipkgdiff', '--topdir', TEST_TOPDIR,
         '--abipkgdiff', ABIPKGDIFF, '--dso-only',
         '--from', 'fc20', '--to', 'fc23', 'dbus-glib'],
        {
            'compared_rpms': [('dbus-glib-0.100.2-2.fc20.i686.rpm',
                               'dbus-glib-0.106-1.fc23.i686.rpm'),
                              ('dbus-glib-0.100.2-2.fc20.x86_64.rpm',
                               'dbus-glib-0.106-1.fc23.x86_64.rpm')],
            'compared_binaries': ['libdbus-glib-1.so.2.2.2']
        }),

    # Tests --no-devel-pkg
    # Without --no-devel-pkg, abipkgdiff is run with development packages
    # by default. In this case, expected changed will be 5 and expected
    # changed_filtered_out will be 17. Otherwise, with --no-devel-pkg,
    # changed will be 6 and changed_filtered_out will be 16.
    CliTestResult(
        ['fedabipkgdiff', '--topdir', TEST_TOPDIR,
         '--abipkgdiff', ABIPKGDIFF,
         'nss-util-3.12.6-1.fc14.x86_64', 'nss-util-3.24.0-2.0.fc25.x86_64'],
        {
            'compared_rpms': [('nss-util-3.12.6-1.fc14.x86_64.rpm',
                               'nss-util-3.24.0-2.0.fc25.x86_64.rpm')],
            'compared_binaries': ['libnssutil3.so'],
            'func_change_summary': {
                'removed': 0, 'changed': 5, 'changed_filtered_out': 17,
                'functions_added': 37}
        }),
    CliTestResult(
        ['fedabipkgdiff', '--topdir', TEST_TOPDIR,
         '--abipkgdiff', ABIPKGDIFF, '--no-devel-pkg',
         'nss-util-3.12.6-1.fc14.x86_64', 'nss-util-3.24.0-2.0.fc25.x86_64'],
        {
            'compared_rpms': [('nss-util-3.12.6-1.fc14.x86_64.rpm',
                               'nss-util-3.24.0-2.0.fc25.x86_64.rpm')],
            'compared_binaries': ['libnssutil3.so'],
            'func_change_summary': {
                'removed': 0, 'changed': 6, 'changed_filtered_out': 16,
                'functions_added': 37}
        })
    )


def assert_compared_binaries(output, expected_binaries):
    """Assert specific binaries are already compared as expected

    Caller doesn't need to care about the order of elements of
    expected_binaries, it will be sorted by `list.sort` before assertion.

    :param str output: output from abipkgdiff that is used to parse and
    assert whether it contains expected binaries.
    :param list expected_binaries: which binaries are expected to be
    compared. Each of the binaries is a rpm filename, for example, foo.so.
    """
    assert isinstance(expected_binaries, (tuple, list))

    binaries = re.findall(r"=+\s?changes of '(.+)'\s*=+", output, re.MULTILINE)
    binaries = list(set(binaries))
    binaries.sort()
    expected_binaries.sort()
    assert expected_binaries == binaries


def assert_compared_rpms(output, expected_rpms):
    """Assert specific rpms are already compared as expected

    Caller doesn't need to care about the order of elements of
    expected_rpms, but the order of each element, that is ('foo-0.1.rpm',
    'foo-0.2.rpm') is different from ('foo-0.2.rpm', 'foo-0.1.rpm').
    expected_rpms will be sorted properly.

    :param str output: output from abipkgdiff that is used to parse and
    assert whether it contains expected rpms.
    :param list expected_rpms: which rpms are expected to be compared.
    """
    assert isinstance(expected_rpms, (tuple, list))

    compared_rpms = re.findall(
        r'Comparing the ABI of binaries between ([^\s]+) and ([^\s]+):',
        output,
        re.MULTILINE)

    sort_key_func = lambda rpm_pair: ' '.join(rpm_pair)
    compared_rpms = sorted(compared_rpms, key=sort_key_func)
    expected_rpms = sorted(expected_rpms, key=sort_key_func)
    assert expected_rpms == compared_rpms


def assert_functions_changes_summary(output, expected_func_change_summary):
    """Assert functions changes summary is the expected result

    :param str output: output from abipkgdiff that is used to parse and
    assert whether "Functions changes summary:" contains expected changes.
    :param dict expected_func_change_summary: a mapping containing
    expected functions changes summary information, where keys must
    contain removed, changed, changed_filtered_out, functions_added.
    """
    assert isinstance(expected_func_change_summary, dict)

    pattern = r'Functions changes summary: (\d+) Removed, (\d+) Changed \((\d+) filtered out\), (\d+) Added functions'  # noqa
    match = re.search(pattern, output)
    if match is None:
        raise ValueError(
            'ABI changes does not contain functions changes summary.')

    groups = match.groups()
    removed = int(groups[0])
    changed = int(groups[1])
    changed_filtered_out = int(groups[2])
    functions_added = int(groups[3])

    assert expected_func_change_summary['removed'] == removed
    assert expected_func_change_summary['changed'] == changed
    assert expected_func_change_summary['changed_filtered_out'] == changed_filtered_out  # noqa
    assert expected_func_change_summary['functions_added'] == functions_added


def assert_abi_comparison_result(output,
                                 expected_binaries=None,
                                 expected_rpms=None,
                                 expected_func_change_summary=None):
    """A convenient way to assert expected values

    Parameters will be passed to corresponding methods. Each assertion
    method called within this method could be invoked individually. This
    method exists as a convenient way to assert all expected values within
    only one method call.
    """
    if expected_rpms:
        assert_compared_rpms(output, expected_rpms)
    if expected_binaries:
        assert_compared_binaries(output, expected_binaries)
    if expected_func_change_summary:
        assert_functions_changes_summary(output, expected_func_change_summary)


@patch('koji.ClientSession', new=MockClientSession)
@patch('sys.stdout', new_callable=StringIO)
@patch('fedabipkgdiff.get_download_dir', return_value=TEST_DOWNLOAD_CACHE_DIR)
def run_abipkgdiff(mock_get_download_dir, mock_stdout):
    fedabipkgdiff_mod.main()
    return mock_stdout.getvalue()


def test_cli():
    """Integration tests for testing various use cases

    All these tests aim to test fedabipkgdiff by executing fedabipkgdiff from
    command line with specific options. Output of fedabipkgdiff will be checked
    to see if it contains expected compared RPMs and binaries.

    Global variable `cli_results` above is a mapping from command line to
    execute fedabipkgdiff to expected results.

    Following are mocked when run each test

    * koji.ClientSession: avoid calling to the real Koji instance.

    * --topdir option: let fedabipkgdiff download rpms from fedabipkgdiff's
      test data directory instead of the remote Koji server.

    * global method get_download_dir: use the fake directory to hold downloaded
      rpm packages instead of .cache/fedabipkgdiff to break anything.

    * sys.argv: to provide fedabipkgdiff command line options for each test.
    """
    for abipkgdiff_cmd, result in cli_results:
        with patch('sys.argv', new=abipkgdiff_cmd):
            output = run_abipkgdiff()

        assert_abi_comparison_result(
            output,
            expected_rpms=result.get('compared_rpms'),
            expected_binaries=result.get('compared_binaries'),
            expected_func_change_summary=result.get('func_change_summary'))


if __name__ == '__main__':
    test_cli()
